using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Http.Resilience;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using Polly;
using Polly.Contrib.Simmy;
using Polly.Telemetry;
using Polly.Timeout;
using Sundry.HttpClientDemisfied.Console;
using Sundry.HttpClientDemisfied.CustomLogger;

HostApplicationBuilder builder = Host.CreateApplicationBuilder(args);
// builder.Services.AddLogging(x => x.AddFilter("Polly", LogLevel.None).AddFilter("System", LogLevel.None).AddConsole());
builder.Services.AddSingleton<TestILoggerCustomLogger>();
builder.Services.AddLogging(x => x.AddJsonConsole(y =>
            {
                y.JsonWriterOptions = new System.Text.Json.JsonWriterOptions { Indented = true };
                y.IncludeScopes = true;
            }));
builder.Services.AddHttpClient<IWeatherForecast, WeatherForecast>(client =>
{
    client.BaseAddress = new Uri("http://localhost:5298/");
}).RemoveAllLoggers()
.AddResilienceHandler("CustomPipeline", (builder, context) =>
{
    /**/
    var telemetryOptions = new TelemetryOptions
    {
        // Configure logging
        LoggerFactory = NullLoggerFactory.Instance,
        // LoggerFactory = LoggerFactory.Create(builder => builder.AddJsonConsole(y =>
        //     {
        //         y.JsonWriterOptions = new System.Text.Json.JsonWriterOptions { Indented = true };
        //         y.IncludeScopes = true;
        //     })),

    };
    

    builder.ConfigureTelemetry(telemetryOptions);

    // See: https://www.pollydocs.org/strategies/retry.html
    builder.AddRetry(new HttpRetryStrategyOptions
    {
        BackoffType = DelayBackoffType.Exponential,
        MaxRetryAttempts = 3,
        Delay = TimeSpan.FromSeconds(10),
        UseJitter = true,
        OnRetry = (x) =>
        {
            var logger = context.ServiceProvider.GetRequiredService<ILogger<WeatherForecast>>();
            logger.LogInformation($"Retry {x.AttemptNumber} after {x.RetryDelay.TotalSeconds}s, due to: {x.Outcome.Exception?.Message}");
            return ValueTask.CompletedTask;
        }
    });
});

using IHost host = builder.Build();
await ExemplifyServiceLifetime(host.Services);

await host.RunAsync();

async Task ExemplifyServiceLifetime(IServiceProvider hostProvider)
{
    using IServiceScope scope = hostProvider.CreateScope();
    IServiceProvider provider = scope.ServiceProvider;
    var weatherForecast = provider.GetRequiredService<IWeatherForecast>();
    var weatherForecastLogger = provider.GetRequiredService<ILogger<WeatherForecast>>();

    using (weatherForecastLogger.BeginScope(new Dictionary<string, object>
    {
        ["CustomerId"] = 12345,
        ["OrderId"] = 54
    }))
    {
        var forecasts = await weatherForecast.GetWeatherForecastAsync();
        foreach (var forecast in forecasts)
        {
            Console.WriteLine(forecast);
        }
    }

}
